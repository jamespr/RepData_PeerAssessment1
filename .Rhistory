b
test2$set(10)
test2$get()
b
dir
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
test<-makeVector()
test$set(5)
l <- list(5, 4, 3, 2, 1)
l
test<-makeVector(l)
test$get()
test$getmean()
cachemean(test)
cachemean(test$getmean())
cachemean()
cachemean(x=test)
test
test$get()
cachemean(test)
test$set(l)
test$get()
cachemean(test)
b <- numeric(1,2,3,4,5)
b
b <- numeric(10)
b
b <- [1:100]
b <- c[1:100]
b <- c(1:100)
b
test<-makeVector(b)
test$get()
cachemean(test)
cachemean(test)
str(solve)
> c=rbind(c(1, -1/4), c(-1/4, 1))
> c <- rbind(c(1, -1/4), c(-1/4, 1))
> d <- rbind(c(1, -1/4), c(-1/4, 1))
> d <- rbind(c(1, -0.25), c(-0.25, 1))
d <- rbind(c(1, -0.25), c(-0.25, 1))
d
solve(d)
c <- rbind(c(1, -0.25), c(-0.25, 1))
solve(c, d)
solve(c, d, c)
str(mean)
if(!is.null(inv)) {
q
afas
sd
f
sdf
sdf
sdf
qq
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inv) m <<- inv
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
m <- solve(data)
x$setInverse(m)
m
}
test<-makeCacheMatrix()
test$set(c)
test$get()
cacheSolve(test)
cacheSolve(test)
test$getInverse()
test$getInverse() %*% c
blah<-makeCacheMatrix(c)
blah$get
blah$get()
blah$getInverse()
c <- rbind(c(1, -0.25), c(-0.25, 1))
## makeCacheMatrix
## creates a special "matrix" object with getters/setters that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
# The cached inverse. NULL if not solved yet, or if matrix has changed
i <- NULL
# Set internal matrix to the passed in value
set <- function(y) {
x <<- y
# Clear the cache, as the old cached inverse may no longer apply to the new matrix
i <<- NULL
}
# Get the internal matrix
get <- function() x
# Set the cached inverse
setInverse <- function(inv) i <<- inv
# Get the cached inverse
getInverse <- function() i
# Return a list containing the getters/setters for the special matrix object
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## CacheSolve
## This function computes the inverse of special "matrix" objects created by makeCacheMatrix
## and caches them. If the cache exists and the matrix has not changed, then the cached value
## is returned to avoid additional expensive computations.
cacheSolve <- function(x) {
# Get the existing cached inverse value from the specified special matrix object
i <- x$getInverse()
# Check if it has already been cached
if(!is.null(i)) {
message("getting cached data")
# Return the cached inverse
return(i)
}
# If it doesn't exists, start computing..
# Get the internal matrix from the matrix object
data <- x$get()
# Solve it
i <- solve(data)
# Set the internal inverse cache in the matrix object
x$setInverse(i)
# Return the computed inverse
i
}
test<-makeCacheMatrix(c)
test$get()
test$getInverse()
cacheSolve(test)
cacheSolve(test)
cacheSolve(test) %*% c
library(datasets)
data(iris)
?iris
iris
?colMeans
?lapply
?tapply
?subset
subset(iris, iris$Species = virginica)
subset(iris, iris$Species=virginica)
subset(iris, (iris$Species=virginica)
e
qwe
subset(iris, (iris$Species=virginica))
subset(iris, iris$Species==virginica)
subset(iris, iris$Species=="virginica")
mean(subset(iris, iris$Species=="virginica")$Sepal.Length)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
a<-tapply(mtcars$hp, mtcars$cyl, mean)
abs(a$4-a$8)
a$4
a['4']
abs(a['4']-a['8'])
abs(a['8']-a['4'])
debug(ls)
la
ls
n
n
ls
1
1
2
ls(10)
install.packages("xlsx")
install.packages("roauth")
install.packages("ROAuth")
library('ROAuth')
install.packages("httr")
library('httr')
github_app <- oauth_app("GitHub Scraper", "e7b7ab6c893e5880cb87")
github_app <- oauth_app("GitHub Scraper", key="e7b7ab6c893e5880cb87", secret="e24bfe8cca012de85a9da70301f72c0e28364865")
oauth1.0_token
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github","e7b7ab6c893e5880cb87", "e24bfe8cca012de85a9da70301f72c0e28364865")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 3. Get OAuth credentials
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github","e7b7ab6c893e5880cb87", "e24bfe8cca012de85a9da70301f72c0e28364865")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github","e7b7ab6c893e5880cb87", "e24bfe8cca012de85a9da70301f72c0e28364865")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
github_token
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github","e7b7ab6c893e5880cb87", "e24bfe8cca012de85a9da70301f72c0e28364865")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
#stop_for_status(req)
#content(req)
req
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("GitHub Scraper",key="e7b7ab6c893e5880cb87", secret="e24bfe8cca012de85a9da70301f72c0e28364865")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
demo("oauth2-github", package = "httr", ask = FALSE)
sd
install.packages("httpub")
install.packages("httpuv")
demo("oauth2-github", package = "httr", ask = FALSE)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("GitHub Scraper",key="e7b7ab6c893e5880cb87", secret="e24bfe8cca012de85a9da70301f72c0e28364865")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("GitHub Scraper",key="e7b7ab6c893e5880cb87", secret="e24bfe8cca012de85a9da70301f72c0e28364865")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
?unz
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?BodyWeight
library(ggplot2)
install.packages(ggplot2)
install.packages(nlme)
library(datasets)
data(airquality)
qplot
qplot()
install.packages("ggplot2")
head(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
setwd("C:/Users/jrobinson/Desktop/RepData_PeerAssessment1")
if (!file.exists("activity.csv")) {
unzip("activity.zip")
}
data <- read.csv("activity.csv")
head(data)
if (!file.exists("activity.csv")) {
unzip("activity.zip")
}
data <- read.csv("activity.csv", header=T, sep=",", na.strings="NA", colClasses=c("integer", "Date", "integer")))
if (!file.exists("activity.csv")) {
unzip("activity.zip")
}
data <- read.csv("activity.csv", header=T, sep=",", na.strings="NA", colClasses=c("integer", "Date", "integer"))
head(data)
library(plyr)
stepsPerDay <- ddply(data, ~date, summarise, steps=sum(steps))
head(stepsPerDay)
stepsPerDay <- ddply(data, ~date, summarise, numSteps=sum(steps))
stepsMean <- mean(stepsByDate$steps, na.rm=TRUE)
stepMedian <- median(stepsByDate$steps, na.rm=TRUE)
stepsPerDay <- ddply(data, ~date, summarise, numSteps=sum(steps))
stepsMean <- mean(stepsPerDay$steps, na.rm=TRUE)
stepMedian <- median(stepsPerDay$steps, na.rm=TRUE)
stepsPerDay <- ddply(data, ~date, summarise, numSteps=sum(steps, na.rm=TRUE))
head(stepsPerDay
)
stepsPerDay <- ddply(data, ~date, summarise, numSteps=sum(steps, na.rm=TRUE))
stepsMean <- mean(stepsPerDay$steps, na.rm=TRUE)
stepMedian <- median(stepsPerDay$steps, na.rm=TRUE)
stepsPerDay <- ddply(data, ~date, summarise, steps=sum(steps, na.rm=TRUE))
stepsMean <- mean(stepsPerDay$steps, na.rm=TRUE)
stepMedian <- median(stepsPerDay$steps, na.rm=TRUE)
hist(stepsPerDay)
hist(stepsPerDay$steps)
head(stepsPerDay
)
stepsPerDay
hist(stepsPerDay$steps, xlab="Total Daily Steps",               # label the x axis
main="Distribution of Steps Per Day",   # set the title
ylim=c(0,20),                           # set the range of the y axis
col="bisque",                           # color the bars
xlim=c(0,25000),                        # set range of x axis
las=1)                                  # rotate y axis labels)
hist(stepsPerDay$steps,
main="Distribution of total number of steps taken each day",
xlab="Total number of steps take each day",
col="BLUE"
)
hist(stepsPerDay$steps,
main="Distribution of total number of steps taken each day",
xlab="Total number of steps take each day",
col="BLUE",
ylim=(c(0,30))
)
hist(stepsPerDay$steps,
main="Distribution of total number of steps taken each day",
xlab="Total number of steps taken each day",
col=0xFF00FF,
ylim=(c(0,30))
)
hist(stepsPerDay$steps,
main="Distribution of total number of steps taken each day",
xlab="Total number of steps taken each day",
col=0x5f9ea0,
ylim=(c(0,30))
)
hist(stepsPerDay$steps,
main="Distribution of total number of steps taken each day",
xlab="Total number of steps taken each day",
col=0x5F9EA0,
ylim=(c(0,30))
)
hist(stepsPerDay$steps,
main="Distribution of total number of steps taken each day",
xlab="Total number of steps taken each day",
col=0x40e0d0,
ylim=(c(0,30))
)
hist(stepsPerDay$steps,
main="Distribution of total number of steps taken each day",
xlab="Total number of steps taken each day",
col=0x40E0D0,
ylim=(c(0,30))
)
hist(stepsPerDay$steps,
main="Distribution of total number of steps taken each day",
xlab="Total number of steps taken each day",
col="cadet blue"",
ylim=(c(0,30))
)
hist(stepsPerDay$steps,
main="Distribution of total number of steps taken each day",
xlab="Total number of steps taken each day",
col="turqoise",
ylim=(c(0,30))
)
colors
colors()
hist(stepsPerDay$steps,
main="Distribution of total number of steps taken each day",
xlab="Total number of steps taken each day",
col="slateblue4",
ylim=c(0,30)
)
hist(stepsPerDay$steps,
main="Distribution of total number of steps taken each day",
xlab="Total number of steps taken each day",
col="steelblue2",
ylim=c(0,30)
)
stepsByInterval <- ddply(data, ~interval, summarise, steps=mean(steps, na.rm=TRUE))
head(stepsByInterval)
head(data)
plot(stepsPerInterval,                      # start the plot
type="l",                             # set to line plot
xlab="Time of day (military time)",   # label the x axis
ylab="Average number of steps",       # label the y axis
ylim=c(0,240),                        # set the y axis range
main="Average activity over time",    # set the title
xaxt='n',                             # turn off x labels
yaxt='n',                             # turn off y labels
col="darkBlue")                       # make line blue
stepsPerInterval <- ddply(data, ~interval, summarise, steps=mean(steps, na.rm=TRUE))
plot(stepsPerInterval,                      # start the plot
type="l",                             # set to line plot
xlab="Time of day (military time)",   # label the x axis
ylab="Average number of steps",       # label the y axis
ylim=c(0,240),                        # set the y axis range
main="Average activity over time",    # set the title
xaxt='n',                             # turn off x labels
yaxt='n',                             # turn off y labels
col="darkBlue")                       # make line blue
plot(stepsPerInterval,
type="l",
)
plot(stepsPerInterval,
type="l"
)
maxSteps <- max(stepsPerInterval$steps)
maxInterval <- stepsPerInterval$interval[stepsPerInterval$steps == maxSteps]
maxSteps
maxInterval
stepsPerInterval
